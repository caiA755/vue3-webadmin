{"ast":null,"code":"// service统一出口\nimport caiRequest from \"./request/caiRequest\";\nimport { ElLoading, ElMessage } from \"element-plus\";\nconst axios_config = {\n  headers: {\n    'X-Bmob-Application-Id': 'e536863a0210f9b43a1e5344b785de3d',\n    'X-Bmob-REST-API-Key': '37b324a62cedd302e6a22fc84e622a5a',\n    'Content-Type': 'application/json'\n  },\n  // baseURL: process.env.BASEURL,\n  baseURL: process.env.VUE_APP_BASE_URL,\n  timeout: 5000,\n  \"Access-Control-Allow-Origin\": \"*\"\n};\nlet loadingInstance = null,\n    isShowLoading = true;\nlet cRequest1 = new caiRequest({\n  axios_config,\n  isShowLoading,\n  Interceptors: {\n    requestInterceptor: config => {\n      console.log('请求成功的拦截'); // console.log(isShowLoading)\n\n      if (isShowLoading) {\n        loadingInstance = ElLoading.service({\n          fullscreen: true,\n          text: \"正在请求数据...\"\n        });\n      }\n\n      return config;\n    },\n    requestInterceptorCatch: config => {\n      console.log('请求错误的拦截');\n      return Promise.reject(error);\n    },\n    responseInterceptor: response => {\n      console.log('响应成功的拦截'); // console.log(response);\n\n      loadingInstance.close();\n      return response;\n    },\n    responseInterceptorCatch: error => {\n      console.log('响应后的拦截');\n      loadingInstance.close(); //状态码判断\n\n      statusShow(error.response.status, error.message);\n      return error;\n    }\n  }\n});\n\nfunction statusShow(statusCode, msg) {\n  let tip = \"\";\n\n  switch (statusCode) {\n    case 301:\n      tip = \"：请求的网页已永久移动到新位置\";\n      break;\n\n    case 304:\n      tip = \"： 自从上次请求后， 请求的网页未修改过。 服务器返回此响应时， 不会返回网页内容\";\n      break;\n\n    case 400:\n      tip = \"：服务器不理解请求的语法\";\n      break;\n\n    case 403:\n      tip = \"：服务器拒绝请求\";\n      break;\n\n    case 404:\n      tip = \"：服务器找不到请求的网页\";\n      break;\n\n    case 500:\n      tip = \"：服务器遇到错误， 无法完成请求\";\n      break;\n\n    case 501:\n      tip = \"：服务器不具备完成请求的功能\";\n      break;\n\n    case 502:\n      tip = \"：服务器作为网关或代理，从上游服务器收到无效响应\";\n      break;\n\n    default:\n      tip = \"\";\n  }\n\n  ElMessage({\n    message: msg + tip,\n    type: 'error',\n    duration: 5 * 1000\n  });\n}\n\nexport default cRequest1;","map":null,"metadata":{},"sourceType":"module"}